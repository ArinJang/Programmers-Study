import java.util.Scanner;
 
public class Main_11724 {
    public static int[][] arr;
    public static int[] visit;
    public static int count = 0;
 
    public static void dfs(int x) {
 
        if (visit[x] == 1) {
            return;                //다음 dfs탐색시에 이미 방문되어있으면 return아예나감
        } else {
            visit[x] = 1;          //visit일단 하지 않았으니 0 인데 이번루프가 끝나면 1로 만들어줘야 탐색한것
        }
        for (int i = 1; i < arr.length; i++) {
            if (arr[x][i] == 1 && visit[i] != 1) {
                dfs(i);                                   // 방문되어있지 않고 밑에서 scanner했던 부분1어야 dfs반복
            }
        }
    }
 
    public static void main(String[] args) {
 
        Scanner sc = new Scanner(System.in);
 
        int a = sc.nextInt();
        int b = sc.nextInt();
        arr = new int[a + 1][a + 1];
        visit = new int[a + 1];
 
        for (int i = 0; i < b; i++) {
            int c = sc.nextInt();
            int d = sc.nextInt();
            arr[c][d] = 1;                   //문제에서 양쪽방향성없기때문에 13 이든 31 이든 똑같다
            arr[d][c] = 1;
        }
 
        for (int i = 1; i <= a; i++) {
            if (visit[i] == 0) {
                dfs(i);
                count++;                    //맨처음 시작은 visit가 다 0 이므로 dfs무조건돈다. 그래서 포함되는부분 다찾아 count증가
            }
        }
 
        System.out.println(count);
 
    }
}
 
